'use client'
import Image from 'next/image'
import React,{useState} from 'react'
import FormField from './FormField'
import Loader from './Loader';
import preview from '/assets/preview.png';
import { getRandomPrompt } from '@/utils';
import { useRouter } from 'next/navigation';
import { form } from '@/typings';
import shareImg from '@/fetch/shareImg';
import getImg from '@/fetch/generateImage';

type Props = {}

function Post({}: Props) {

    const router = useRouter();

    const [form, setform] = useState<form>({
        name: '',
        prompt: '',
        photo: ''
    });

    const [isSurprise, setIsSurprise] = useState<boolean>(true);
    const [generatingimg, setgeneratingimg] = useState<boolean>(false);
    const [loading, setloading] = useState<boolean>(false); 
    const [generatedImage,setgeneratedImage] = useState<boolean>(false);


    const handleSubmit = async(e:React.FormEvent<HTMLFormElement>)=>{
        setloading(true);
        e.preventDefault();
        try {
            const dataImg = await shareImg({...form});  
            console.log(dataImg);
            router.push('/');
        } catch (error) {
            console.log("why is error",error);
        } finally{
            setloading(false);
        }
    };

    const handleChange = (e:React.FormEvent<HTMLInputElement>)=>{
        setform({...form,[e.currentTarget.name]:e.currentTarget.value})

    }

    const handleSurprise = ()=>{
        const randomPrompt = getRandomPrompt(form.prompt);
        setform({...form,prompt: randomPrompt});
    }

    const generateImg = async()=>{
        setgeneratingimg(true);
        console.log(form.prompt);
        try {
                const base64_data = await getImg(form.prompt);
                setform({...form,photo: `data:image/jpeg;base64,${base64_data.image}`})
                setgeneratedImage(true);
        } catch (error) {
            console.log('why the error',error)
        } finally{
            setgeneratingimg(false);
        }
    }

  return (
    <section>
        <h1 className='font-extrabold text-[#222328] text-[32px]'>Create</h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[500px]'>
        Create imaginative and visually stunning images generated by DALL-E AI and share them with the community
        </p>


        <form className='mt-16 max-w-3xl' onSubmit={handleSubmit}>
            <div className="flex flex-col gap-5">
                <FormField
                lableName="Your Name"
                type="text"
                name="name"
                placeholder="talha"
                value={form.name}
                handleChange={handleChange}
                />

                <FormField
                lableName="Prompt"
                type="text"
                name="prompt"
                placeholder="Fire in the ice"
                value={form.prompt}
                handleChange={handleChange}
                isSurprise
                handleSurprise={handleSurprise}
                />

                <div className='relative bg-gray-50 border border-gray-300 text-sm text-gray-900
                    rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 
                    flex items-center justify-center
                '>

                    {
                        form.photo ?
                        (<img className="w-full h-full object-contain" src={form.photo} alt="" />)
                    :
                        (<Image className='w-[75%] h-[75%] object-contain opacity-40' src={preview} alt="image is missing"/>)
                    }

                    {
                        generatingimg && (
                        <div className="absolute inset-0 z-0 flex
                        justify-center items-center rounded-lg 
                        bg-[rgba(0,0,0,0.5)]">
                            <Loader/>
                        </div>
                    )}
                </div>
            </div>

            <div className='mt-5 flex gap-5'>
                    <button type='button' className='bg-green-700 text-white font-medium rounded-md text-sm w-full py-2.5 px-5
                     sm:w-auto text-center' onClick={generateImg}>
                        {generatingimg ? 'Generating...' : 'Generate'}
                    </button>
            </div>

            {generatedImage && (
            <div className='mt-10'>
               <p className='mt-2 text-[#667e75] text-[14px]'>Once you create the image you want, you can share it with your community members</p>
                <button
                    type='submit'
                    className='mt-3 text-sm sm:w-auto w-full text-white bg-[#6469ff] rounded-md font-medium py-2.5 px-5 text-center'
                >
                    {loading ? 'Sharing...' : 'Share with the community'}
                </button>
            </div>
            )}
        </form>
    </section>
  )
}

export default Post 